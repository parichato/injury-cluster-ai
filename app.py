
import streamlit as st
import pandas as pd
import joblib, json

# ===============================
# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ===============================
cat_model = joblib.load("predict_catboost_multi.pkl")
scaler_pred = joblib.load("predict_scaler_multi.pkl")
kmeans = joblib.load("cluster_kmeans.pkl")
scaler_cluster = joblib.load("cluster_scaler.pkl")
rules = pd.read_csv("association_rules.csv")
metrics = json.load(open("catboost_metrics.json"))

# ===============================
# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
# ===============================
st.set_page_config(page_title="üè• AI Injury Analysis Dashboard", layout="wide")
st.title("üè• AI Injury Analysis Dashboard")
st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: Prediction ‚Ä¢ Clustering ‚Ä¢ Association Rules")

# ===============================
# üîπ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
# ===============================
model_choice = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:",
    ["Predict (CatBoost Multi-Class)", "Cluster (K-Means)", "Association Rules"]
)

# ===============================
# üîπ Sidebar: ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö
# ===============================
st.sidebar.header("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
age = st.sidebar.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", 0, 100, 25)
sex = st.sidebar.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
is_night = st.sidebar.selectbox("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", ["‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"])
head_injury = st.sidebar.selectbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])

# ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (risk1‚Äìrisk5)
st.sidebar.markdown("### ‚ö†Ô∏è ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
risk1 = st.sidebar.selectbox("Risk 1: ‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å/‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
risk2 = st.sidebar.selectbox("Risk 2: ‡πÄ‡∏°‡∏≤‡∏™‡∏∏‡∏£‡∏≤", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
risk3 = st.sidebar.selectbox("Risk 3: ‡πÉ‡∏ä‡πâ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå/‡∏Ç‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
risk4 = st.sidebar.selectbox("Risk 4: ‡∏ù‡πà‡∏≤‡∏ù‡∏∑‡∏ô‡∏Å‡∏é‡∏à‡∏£‡∏≤‡∏à‡∏£", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
risk5 = st.sidebar.selectbox("Risk 5: ‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])

# ‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î
st.sidebar.markdown("### üíä ‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
cannabis = st.sidebar.selectbox("‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
amphetamine = st.sidebar.selectbox("‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏ö‡πâ‡∏≤", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])
drugs = st.sidebar.selectbox("‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ", ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"])

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
X_input = pd.DataFrame([{
    "age": age,
    "sex": 1 if sex == "‡∏ä‡∏≤‡∏¢" else 0,
    "is_night": 1 if is_night == "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô" else 0,
    "head_injury": 1 if head_injury == "‡πÉ‡∏ä‡πà" else 0,
    "risk1": 1 if risk1 == "‡πÉ‡∏ä‡πà" else 0,
    "risk2": 1 if risk2 == "‡πÉ‡∏ä‡πà" else 0,
    "risk3": 1 if risk3 == "‡πÉ‡∏ä‡πà" else 0,
    "risk4": 1 if risk4 == "‡πÉ‡∏ä‡πà" else 0,
    "risk5": 1 if risk5 == "‡πÉ‡∏ä‡πà" else 0,
    "cannabis": 1 if cannabis == "‡πÉ‡∏ä‡πà" else 0,
    "amphetamine": 1 if amphetamine == "‡πÉ‡∏ä‡πà" else 0,
    "drugs": 1 if drugs == "‡πÉ‡∏ä‡πà" else 0
}])

# ===============================
# üß† 1. Prediction (CatBoost)
# ===============================
if model_choice == "Predict (CatBoost Multi-Class)":
    st.subheader("üß† ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (CatBoost Multi-Class)")
    st.write(f"üìä **Model Performance:** Accuracy: `{metrics['accuracy']}` | Weighted F1: `{metrics['f1_weighted']}` | CV-F1: `{metrics['cv_f1_mean']}`")

    if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á"):
        X_scaled = scaler_pred.transform(X_input)
        pred_class = int(cat_model.predict(X_scaled)[0])

        severity_map = {
            0: ("üü¢ ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Minor)", "success"),
            1: ("üü° ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (Severe)", "warning"),
            2: ("üî¥ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (Fatal)", "error")
        }

        msg, style = severity_map[pred_class]
        st.markdown(f"### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {msg}")

        if style == "success":
            st.success("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ üü¢")
        elif style == "warning":
            st.warning("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° üü°")
        else:
            st.error("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô üî¥")

        st.info("üí° ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á \
‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")

# ===============================
# üìä 2. Clustering (K-Means)
# ===============================
elif model_choice == "Cluster (K-Means)":
    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö (K-Means Clustering)")

    if st.button("üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°"):
        X_scaled = scaler_cluster.transform(X_input)
        cluster = int(kmeans.predict(X_scaled)[0])

        cluster_desc = {
            0: ("üü¢ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ (Low-risk)", "success"),
            1: ("üü° ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate-risk)", "warning"),
            2: ("üî¥ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (High-risk)", "error")
        }

        msg, style = cluster_desc[cluster]
        st.markdown(f"### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: {msg}")

        if style == "success":
            st.success("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≥‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ üü¢")
        elif style == "warning":
            st.warning("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á üü°")
        else:
            st.error("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î üî¥")

        st.caption("üîé ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏™‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

# ===============================
# üîó 3. Association Rules
# ===============================
elif model_choice == "Association Rules":
    st.subheader("üîó ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Apriori Association Rules)")

    min_conf = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Confidence ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:", 0.5, 1.0, 0.6)
    filtered = rules[rules["confidence"] >= min_conf].sort_values("lift", ascending=False).head(10)

    st.markdown("#### üìã ‡∏Å‡∏é‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    st.dataframe(filtered[["antecedents","consequents","support","confidence","lift"]])

    if not filtered.empty:
        top_rule = filtered.iloc[0]
        st.info(f"üí° **Insight:** ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ `{top_rule['antecedents']}` ‡∏°‡∏±‡∏Å‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö `{top_rule['consequents']}` \
(Confidence: {round(top_rule['confidence'],2)}, Lift: {round(top_rule['lift'],2)})")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")

    st.caption("‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô \
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ì‡∏£‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
